{"version":3,"sources":["SearchComponent.js","ComposeComponent.js","TopNavigation.js","LeftPanel.js","Post.js","App.js","serviceWorker.js","index.js"],"names":["SearchComponent","react_default","a","createElement","className","Component","ComposeComponent","TopNavigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","show","setState","console","log","_this2","src_SearchComponent_0","src_ComposeComponent_0","type","onClick","setBarState","LeftPanel","Post","fecthPost","date","author","title","content","App","isLoading","posts","fetch","response","json","body","_this$state","src_TopNavigation_0","src_LeftPanel_0","map","post","src_Post_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfe6aa4e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './SearchComponent.css';\r\n\r\nclass SearchComponent extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchComponentDiv\">\r\n                <h1> Search Component </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchComponent;","import React, { Component } from 'react';\r\nimport './ComposeComponent.css';\r\n\r\nclass ComposeComponent extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ComposeComponentDiv\">\r\n                <h1> Compose Component </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ComposeComponent;","import React, { Component } from 'react';\r\nimport './TopNavigation.css';\r\nimport SearchComponent from './SearchComponent';\r\nimport ComposeComponent from \"./ComposeComponent\";\r\n\r\nclass TopNavigation extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: \"SearchComponent\"};\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  setCompose() {\r\n\r\n  }\r\n\r\n  setBarState(a) {\r\n    this.setState({ show: a })\r\n    console.log(\"this \");\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.show)\r\n    let a = <SearchComponent/>;\r\n    if (this.state.show === \"SearchComponent\") {\r\n      console.log(\"eka\");\r\n      a = <SearchComponent/>;\r\n    } else {\r\n      console.log(\"toka\");\r\n      a = <ComposeComponent/>;\r\n    }\r\n\r\n    return (\r\n    <div className=\"TopNavDiv\">\r\n      <ul className=\"TopNavUL\">\r\n        <li>Browse</li>\r\n        <li> <button type=\"submit\" onClick={() => { this.setBarState(\"SearchComponent\") }}>Search</button> </li>\r\n        <li>Delete</li>\r\n        <li>Modify</li>\r\n        <li> <button type=\"submit\" onClick={() => { this.setBarState(\"ComposeComponent\") }}>Search</button> </li>\r\n      </ul>\r\n      {a}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopNavigation;","import React, { Component } from 'react';\r\nimport './LeftPanel.css';\r\n\r\nclass LeftPanel extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LeftPanelDiv\">\r\n                <ul className=\"LeftPanelUL\">\r\n                    <li>One</li>\r\n                    <li>Two</li>\r\n                    <li>Three</li>\r\n                    <li>Four</li>\r\n                    <li>Five</li>\r\n                    <li>Six</li>\r\n                    <li>Seven</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeftPanel;","import React, { Component } from 'react';\r\nimport './Post.css';\r\n\r\nclass Post extends Component {\r\n\r\n    async componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"post\">\r\n                <p>Date: {this.props.fecthPost.date}</p>\r\n                <p>Author: {this.props.fecthPost.author}</p>\r\n                <p>Title: {this.props.fecthPost.title}</p>\r\n                <p>Content: {this.props.fecthPost.content}</p>\r\n                <br></br>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TopNavigation from './TopNavigation';\r\nimport LeftPanel from './LeftPanel';\r\nimport Post from './Post';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    posts: []\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const response = await fetch('api/posts');\r\n    const body = await response.json();\r\n    this.setState({ posts: body, isLoading: false });\r\n  }\r\n\r\n  render() {\r\n    const {posts, isLoading} = this.state;\r\n\r\n    if (isLoading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n          <TopNavigation />\r\n          <LeftPanel />\r\n            <div className=\"App-intro\">\r\n              {posts.map(post =>\r\n                  <Post fecthPost={post}/>\r\n              )}\r\n            </div>\r\n          </header>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}